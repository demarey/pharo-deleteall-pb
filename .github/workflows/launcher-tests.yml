# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          repository: pharo-project/pharo-launcher
          ref: dev
          fetch-depth: 0

      - uses: demarey/pharo-setup-gha@main
        with:
          version: 12
          
      - name: Build image
        run: |
           ls .
           $PHARO --headless Pharo.image eval --save "Metacello new baseline: 'PharoLauncher'; repository: 'gitlocal://src'; ignoreImage; onConflictUseIncoming; onWarning: [:ex | ex load]; load"

      - name: Run tests
        run: |
          rm -rf ~/Pharo # clean posssible remaining Pharo files
          $PHARO --headless Pharo.image test --junit-xml-output "PharoLauncher.*"	

      - uses: actions/upload-artifact@v4  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
            name: test-results
            path: ./*.xml

      - name: Test report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Pharo Launcher Tests        # Name of the check run which will be created
          path: ./*.xml                     # Path to test results
          reporter: java-junit              # Format of test results
